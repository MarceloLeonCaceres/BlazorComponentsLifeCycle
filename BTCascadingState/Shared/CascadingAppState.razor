@implements IAppState
@inject ILocalStorageService LocalStorageService

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public int TimeToLiveInSeconds { get; set; } = 60;
    public DateTime LastAccessed { get; set; } = DateTime.Now;

    private DateTime ddesde = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1); 
    public DateTime dDesde
    {
        get { return ddesde; }
        private set { ddesde = value; }
    }

    private DateTime dhasta = DateTime.Now;
    public DateTime dHasta
    {
        get { return dhasta; }
        private set { dhasta = value; }
    }

    private List<int> listusers = null;
    public List<int> listUsers
    {
        get { return listusers; }
        private set { listusers = value; }
    }

    private string Caller = "";

    public void SetProperty(ComponentBase caller, string PropertyName, object PropertyValue)
    {
        try
        {
            var prop = this.GetType().GetProperty(PropertyName);
            if(prop != null)
            {
                this.Caller = caller.GetType().Name;
                prop.SetValue(this, PropertyValue);
                SaveChanges();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {   
            throw;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Get the json data
            var json = await LocalStorageService.GetItemAsStringAsync("AppStateJson");
            if(json != null && json != "")
            {
                // Deserialize to AppStateData
                var appStateData = JsonSerializer.Deserialize<AppStateData>(json);
                // Are we within the window?
                if(DateTime.Now <= appStateData.LastAccessed.AddSeconds(appStateData.TimeToLiveInSeconds))
                {
                    // Yes! use our own SetProperty method to set our property values
                    var properties = appStateData.GetType().GetProperties();
                    foreach(var property in properties)
                    {
                        var value = property.GetValue(appStateData);
                        SetProperty(this, property.Name, value);
                    }
                    // Re-render
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    public void SaveChanges()
    {
        // LocalStorage allows up to 5Mb by default

        LastAccessed = DateTime.Now;
        var appstate = (IAppState)this;
        var json = System.Text.Json.JsonSerializer.Serialize(appstate);
        LocalStorageService.SetItemAsStringAsync("AppStateJson", json);
    }

}
